# Include your project-specific ignores in this file
# Read about how to use .gitignore: https://help.github.com/articles/ignoring-files

# For sensible defaults for a language, operating system, or editor, see:
# https://github.com/github/gitignore

# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead.
#
# Fetch your current git excludesfile:
#   git config --get core.excludesfile
#
# Set your git excludesfile
#   git config --global core.excludesfile '~/.config/git/ignore'
#
# Git will automatically ignore items in this file:
#   '~/.config/git/ignore'

# To check what is being ignored in a folder, run this:
#   git check-ignore -nv `ls`

# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so

# Packages #
############
# it's better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Logs and databases #
######################
*.log
*.sql
*.sqlite

# OS generated files #
######################
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
